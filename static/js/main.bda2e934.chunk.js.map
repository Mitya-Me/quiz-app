{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","scss/fonts/UbuntuMono-Bold.woff","scss/fonts/UbuntuMono-Regular.woff","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","AnswerWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestion","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","onClick","value","GlobalStyle","createGlobalStyle","UbuntuMonoRegular","UbuntuMonoBold","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestion","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTION","nextQuestion","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bda2e934.chunk.js","sourcesContent":["import {shuffleArray} from './utils'\r\nexport interface Question {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\nexport interface Answers {\r\n    answers: string[]\r\n} \r\n\r\nexport interface QuestionState extends Question, Answers {}\r\n\r\nexport enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard',\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n    const data = await (await fetch(endpoint)).json()\r\n    return data.results.map((question: Question) => ({\r\n        ...question,\r\n        answers: shuffleArray([\r\n            ...question.incorrect_answers,\r\n            question.correct_answer,\r\n        ])\r\n    }))\r\n}\r\n","export const shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5)","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    width: 1100px;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    box-shadow: 0 0 17px pink;\r\n    text-align: center;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    @media (max-width: 1200px) {\r\n        width: 800px;\r\n    }\r\n\r\n    @media (max-width: 850px) {\r\n        width: 100%;\r\n    }\r\n\r\n    @media (max-width: 450px) {\r\n        padding: 10px;\r\n    }\r\n\r\n    .question-block__header {\r\n        &-count {\r\n            color: pink;\r\n            font-size: 1.2rem;\r\n\r\n            @media (max-width: 450px) {\r\n                margin: 0;\r\n                font-size: 1.1rem;\r\n            }\r\n        }\r\n\r\n        &-quest {\r\n            color: hotpink;\r\n            font-size: 1.4rem;\r\n            font-weight: bold;\r\n\r\n            @media (max-width: 450px) {\r\n                margin: 5px 0;\r\n                font-size: 1.2rem;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\ntype AnswerWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n};\r\n\r\nexport const AnswerWrapper = styled.div<AnswerWrapperProps>`\r\n    transition: all 0.5s ease;\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n\r\n    .question-block__answer {\r\n\r\n        &-btn {\r\n            display: flex;\r\n            justify-content: center;\r\n            padding: 5px 10px;\r\n            transition: all 0.2s ease;\r\n            cursor: pointer;\r\n            user-select: none;\r\n            font-size: 1.5rem;\r\n            width: 80%;\r\n            font-weight: bold;\r\n            margin: 5px 0;\r\n            background: ${({ correct, userClicked }) =>\r\n                correct ? \"hotpink\" : !correct && userClicked ? \"red\" : \"pink\"};\r\n            border: 2px solid #ffffff;\r\n            box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n            border-radius: 10px;\r\n            color: #fff;\r\n            text-shadow: 0px 2px 2px rgba(0, 0, 0, 0.25);\r\n\r\n            &:hover {\r\n                text-shadow: 0px 3px 5px hotpink;\r\n            }\r\n\r\n            @media (max-width: 450px) {\r\n                font-size: 1.2rem;\r\n            }\r\n        }\r\n\r\n\r\n        &-text {\r\n            font-family: 'UbuntuMono';\r\n            flex: 0 0 100%;\r\n        }\r\n    }\r\n`;\r\n","import { FC } from \"react\";\r\n// Types\r\nimport { AnswerObject } from \"../App\";\r\n// Styles\r\nimport { Wrapper, AnswerWrapper } from \"./QuestionCard.styles\";\r\n\r\ninterface Props {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestion: number;\r\n}\r\n\r\nconst QuestionCard: FC<Props> = ({\r\n    question,\r\n    answers,\r\n    callback,\r\n    userAnswer,\r\n    questionNr,\r\n    totalQuestion,\r\n}) => (\r\n    <Wrapper>\r\n        <div className='question-block__header'>\r\n            <p className='question-block__header-count'>\r\n                Question: {questionNr} / {totalQuestion}\r\n            </p>\r\n            <p\r\n                className='question-block__header-quest'\r\n                dangerouslySetInnerHTML={{ __html: question }}\r\n            />\r\n        </div>\r\n\r\n        <div className='question-block__answers'>\r\n            {answers.map((answer) => (\r\n                <AnswerWrapper\r\n                    className='question-block__answer'\r\n                    key={answer}\r\n                    correct={userAnswer?.correctAnswer === answer}\r\n                    userClicked={userAnswer?.answer === answer}\r\n                >\r\n                    <button\r\n                        className='question-block__answer-btn'\r\n                        disabled={userAnswer ? true : false}\r\n                        onClick={callback}\r\n                        value={answer}\r\n                    >\r\n                        <span\r\n                            className='question-block__answer-text'\r\n                            dangerouslySetInnerHTML={{ __html: answer }}\r\n                        />\r\n                    </button>\r\n                </AnswerWrapper>\r\n            ))}\r\n        </div>\r\n    </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n","export default __webpack_public_path__ + \"static/media/UbuntuMono-Bold.aab53048.woff\";","export default __webpack_public_path__ + \"static/media/UbuntuMono-Regular.1b36b67c.woff\";","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nimport UbuntuMonoBold from \"./scss/fonts/UbuntuMono-Bold.woff\";\r\nimport UbuntuMonoRegular from \"./scss/fonts/UbuntuMono-Regular.woff\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    height: 100%;\r\n    }\r\n\r\n    @font-face {\r\n        font-family: 'UbuntuMono';\r\n        src: url(${UbuntuMonoRegular});\r\n        font-weight: 400;\r\n        font-display: swap;\r\n        font-style: normal;\r\n    \r\n    @font-face {\r\n        font-family: 'UbuntuMono';\r\n        src: url(${UbuntuMonoBold});\r\n        font-weight: 700;\r\n        font-display: swap;\r\n        font-style: normal;\r\n    }\r\n\r\n    body {\r\n    margin: 0;\r\n    padding: 0 5px;\r\n    }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    }\r\n`;\r\n\r\n\r\nexport const Wrapper = styled.div`\r\n    font-family: 'UbuntuMono', 'Courier New', sans-serif;\r\n    max-width: 1250px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin: 0 auto;\r\n\r\n    .header {\r\n        flex: 0 0 100%;\r\n\r\n        &__title {\r\n            font-family: \"UbuntuMono\";\r\n            background-image: linear-gradient(180deg, pink, white);\r\n            font-weight: bold;\r\n            background-size: 100%;\r\n            background-clip: text;\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n            -moz-background-clip: text;\r\n            -moz-text-fill-color: transparent;\r\n            filter: drop-shadow(2px 2px hotpink);\r\n            font-size: 4rem;\r\n            text-align: center;\r\n            margin: 10px 20px;\r\n\r\n            @media (max-width: 450px) {\r\n                font-size: 1.4rem;\r\n            }\r\n        }\r\n\r\n        &__btn-start {\r\n            transition: 0.4s ease;\r\n            color: white;\r\n            cursor: pointer;\r\n            font-weight: bold;\r\n            display: block;\r\n            font-size: 1.3rem;\r\n            font-family: inherit;\r\n            background: pink;\r\n            border: 2px solid white;\r\n            box-shadow: 0px 5px 10px hotpink;\r\n            border-radius: 10px;\r\n            height: 40px;\r\n            margin: 10px auto;\r\n            padding: 0 40px;\r\n            max-width: 200px;\r\n\r\n            &:hover {\r\n                transform: scale(1.2);\r\n                background-image: linear-gradient(\r\n                    to right,\r\n                    #e7484f,\r\n                    #e7484f 16.65%,\r\n                    #f68b1d 16.65%,\r\n                    #f68b1d 33.3%,\r\n                    #fced00 33.3%,\r\n                    #fced00 49.95%,\r\n                    #009e4f 49.95%,\r\n                    #009e4f 66.6%,\r\n                    #00aac3 66.6%,\r\n                    #00aac3 83.25%,\r\n                    #732982 83.25%,\r\n                    #732982 100%,\r\n                    #e7484f 100%\r\n                );\r\n                animation: slidebg 3.4s linear infinite;\r\n            }\r\n        }\r\n    }\r\n\r\n    .content-page {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n\r\n        &__stat {\r\n            \r\n            &-score {\r\n                font-size: 1.6rem;\r\n                color: pink;\r\n                text-align: center;\r\n                margin: 0 0 10px 0;\r\n\r\n                @media(max-width: 450px) {\r\n                    font-size: 20px;\r\n                }\r\n                \r\n                span{\r\n                }\r\n            }\r\n\r\n            &-preload {\r\n                color: pink;\r\n                font-family: 'UbuntuMono', 'Monospace';\r\n            }\r\n        }\r\n\r\n        &__btn-next {\r\n            margin-top: 15px;\r\n            font-family: 'UbuntuMono';\r\n            font-weight: bold;\r\n            cursor: pointer;\r\n            border: none;\r\n            box-shadow: 0 0 10px pink;\r\n            border-radius: 10px;\r\n            padding: 5px 15px;\r\n            font-size: 1.8rem;\r\n            background: linear-gradient(to right, #A445B2 50%, #ffffff 52%, #FF0066 100%);\r\n            -webkit-background-clip: text;\r\n            background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n            background-repeat: no-repeat;\r\n            background-size: 80%;\r\n            animation: shine 1.8s ease-in-out infinite;\r\n\r\n            @media(max-width: 850px) {\r\n                font-size:  1.5rem;\r\n            }\r\n\r\n            @media(max-width: 450px) {\r\n                font-size: 1.2rem;\r\n                margin-top: 10px;\r\n                box-shadow: 0 0 5px pink;\r\n            }\r\n        }\r\n    }\r\n\r\n    @keyframes slidebg {\r\n        to {\r\n            background-position: 20vw;\r\n        }\r\n    }\r\n\r\n    @keyframes shine {\r\n        0% {\r\n            background-position-x: -500%;\r\n        }\r\n        100% {\r\n            background-position-x: 500%;\r\n        }\r\n    }\r\n`;\r\n","import { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\";\n//  Components\nimport QuestionCard from \"./components/QuestionCard\";\n//  Enum\nimport { Difficulty } from \"./API\";\n//  Interface\nimport { QuestionState } from \"./API\";\n// Styles\nimport { GlobalStyle, Wrapper} from \"./App.styles\";\n\nexport interface AnswerObject {\n    question: string;\n    answer: string;\n    correct: boolean;\n    correctAnswer: string;\n}\n\nconst TOTAL_QUESTION = 10;\n\nconst App = () => {\n    const [loading, setLoading] = useState(false);\n    const [questions, setQuestions] = useState<QuestionState[]>([]);\n    const [number, setNumber] = useState(0);\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n    const [score, setScore] = useState(0);\n    const [gameOver, setGameOver] = useState(true);\n\n    const startTrivia = async () => {\n        // Добавить try catch\n        setLoading(true);\n        setGameOver(false);\n\n        const newQuestion = await fetchQuizQuestions(\n            TOTAL_QUESTION,\n            Difficulty.EASY\n        );\n\n        setQuestions(newQuestion);\n        setScore(0);\n        setUserAnswers([]);\n        setNumber(0);\n        setLoading(false);\n    };\n\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (!gameOver) {\n            // User answer\n            const answer = e.currentTarget.value;\n            // Check the user's answer against correct answer\n            const correct = questions[number].correct_answer === answer;\n            // Add score if answer is correct\n            if (correct) setScore((prev) => prev + 1);\n            // Save answer in the array for user answers\n            const answerObject = {\n                question: questions[number].question,\n                answer,\n                correct,\n                correctAnswer: questions[number].correct_answer,\n            };\n            setUserAnswers((prev) => [...prev, answerObject]);\n        }\n    };\n\n    const nextQuestion = () => {\n        //Move on to the next question if not the last question\n        const nextQuestion = number + 1;\n\n        if (nextQuestion === TOTAL_QUESTION) {\n            setGameOver(true);\n        } else {\n            setNumber(nextQuestion);\n        }\n    };\n\n    return (\n        <>\n            <GlobalStyle />\n            <Wrapper>\n                <header className='header'>\n                    <h1 className='header__title'> React Quiz </h1>\n                    {gameOver || userAnswers.length === TOTAL_QUESTION ? (\n                        <button className='header__btn-start' onClick={startTrivia}>\n                            Start\n                        </button>\n                    ) : null}\n                </header>\n\n                <div className='content-page'>\n                    <div className='content-page__stat'>\n                        {!gameOver ? (\n                            <p className='content-page__stat-score'>Score:<span>{score}</span></p>\n                        ) : null}\n                        {loading && <p className='content-page__stat-preload'>Loading Questions...</p>}\n                    </div>\n\n                    <div className='content-page__question-block question-block'>\n                        {!loading && !gameOver && (\n                            <QuestionCard\n                                questionNr={number + 1}\n                                totalQuestion={TOTAL_QUESTION}\n                                question={questions[number].question}\n                                answers={questions[number].answers}\n                                userAnswer={\n                                    userAnswers\n                                        ? userAnswers[number]\n                                        : undefined\n                                }\n                                callback={checkAnswer}\n                            />\n                        )}\n                    </div>\n\n                    {!gameOver &&\n                    !loading &&\n                    userAnswers.length === number + 1 &&\n                    number !== TOTAL_QUESTION - 1 ? (\n                        <button className='content-page__btn-next' onClick={nextQuestion}>\n                            Next Question\n                        </button>\n                    ) : null}\n                </div>\n            </Wrapper>\n        </>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}