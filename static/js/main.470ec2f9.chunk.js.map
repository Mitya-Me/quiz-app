{"version":3,"sources":["API.ts","utils.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","App","useState","setLoading","setQuestions","setNumber","setUserAnswers","setScore","setGameOver","startTrivia","EASY","newQuestion","className","onClick","ReactDOM","render","document","getElementById"],"mappings":"gHAeYA,E,8EAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAML,IAAMC,EAAkB,uCAAG,WAAOC,EAAgBC,GAAvB,iBAAAC,EAAA,6DACxBC,EADwB,6CACyBH,EADzB,uBAC8CC,EAD9C,2BAEJG,MAAMD,GAFF,8BAEaE,OAFb,cAExBC,EAFwB,yBAGvBA,EAAKC,QAAQC,KAAI,SAACC,GAAD,mBAAC,eAClBA,GADiB,IAEpBC,SC1BqBC,ED0BC,GAAD,mBACdF,EAASG,mBADK,CAEjBH,EAASI,iBC3BjB,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADd,IAACL,MDqBK,2CAAH,wD,OEsDhBM,EAzDH,WACV,MAA8BC,oBAAS,GAAvC,mBAAgBC,GAAhB,WACA,EAAkCD,mBAA0B,IAA5D,mBAAkBE,GAAlB,WACA,EAA4BF,mBAAS,GAArC,mBAAeG,GAAf,WACA,EAAsCH,mBAAyB,IAA/D,mBAAoBI,GAApB,WACA,EAA0BJ,mBAAS,GAAnC,mBAAcK,GAAd,WACA,EAAgCL,oBAAS,GAAzC,mBAAiBM,GAAjB,WAEMC,EAAW,uCAAG,4BAAAvB,EAAA,6DAElBiB,GAAW,GACXK,GAAY,GAHM,SAKQzB,EAfP,GAiBjBD,EAAW4B,MAPK,OAKZC,EALY,OAUlBP,EAAaO,GACbJ,EAAS,GACTD,EAAe,IACfD,EAAU,GACVF,GAAW,GAdO,4CAAH,qDA0BjB,OACE,sBAAKS,UAAU,MAAf,UACE,4CACA,wBAAQA,UAAU,QAAQC,QAASJ,EAAnC,mBAGA,mBAAGG,UAAU,QAAb,oBACA,qDASA,wBAAQA,UAAU,OAAOC,QApBR,aAoBjB,+BChENC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.470ec2f9.chunk.js","sourcesContent":["import {shuffleArray} from './utils'\r\nexport interface Question {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    qustion: string;\r\n    type: string;\r\n}\r\nexport interface Answers {\r\n    answers: string[]\r\n} \r\n\r\nexport interface QuestionState extends Question, Answers {}\r\n\r\nexport enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard',\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n    const data = await (await fetch(endpoint)).json()\r\n    return data.results.map((question: Question) => ({\r\n        ...question,\r\n        answers: shuffleArray([\r\n            ...question.incorrect_answers,\r\n            question.correct_answer,\r\n        ])\r\n    }))\r\n}\r\n","export const shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5)","import { useState } from \"react\"\nimport { fetchQuizQuestions } from \"./API\";\n//  Components\nimport QuestionCard from \"./components/QuestionCard\"\n//  Enum\nimport { Difficulty } from \"./API\"\n//  Interface\nimport { QuestionState } from \"./API\"\n\ninterface AnswerObject  {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTION = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [gameOver, setGameOver] = useState(true)\n\n  const startTrivia = async () => {\n    // Добавить try catch\n    setLoading(true)\n    setGameOver(false)\n\n    const newQuestion = await fetchQuizQuestions(\n      TOTAL_QUESTION,\n      Difficulty.EASY\n    )\n\n    setQuestions(newQuestion)\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0);\n    setLoading(false)\n\n  } \n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    \n  }\n\n  const nextQuestion = () => {\n    \n  }\n\n  return (\n    <div className='app'>\n      <h1>React Quiz</h1>\n      <button className='start' onClick={startTrivia}>\n        Start\n      </button>\n      <p className='score'>Score:</p>\n      <p>Loading Questions...</p>\n      {/* <QuestionCard\n        questionNr={number + 1}\n        totalQuestion={TOTAL_QUESTION}\n        question={question[number].question}\n        answers={question[number].answers}\n        userAnswer={userAnswers ? userAnswers[number] : undefined}\n        callback={checkAnswer}\n      /> */}\n      <button className='next' onClick={nextQuestion}>\n        Next Question\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}