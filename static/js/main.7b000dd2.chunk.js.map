{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","scss/fonts/UbuntuMono-Bold.woff","scss/fonts/UbuntuMono-Regular.woff","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestion","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","onClick","value","GlobalStyle","createGlobalStyle","UbuntuMonoRegular","UbuntuMonoBold","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestion","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTION","nextQuestion","ReactDOM","render","document","getElementById"],"mappings":"8GAeYA,E,+EAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAML,I,QAAMC,EAAkB,uCAAG,WAAOC,EAAgBC,GAAvB,iBAAAC,EAAA,6DACxBC,EADwB,6CACyBH,EADzB,uBAC8CC,EAD9C,2BAEJG,MAAMD,GAFF,8BAEaE,OAFb,cAExBC,EAFwB,yBAGvBA,EAAKC,QAAQC,KAAI,SAACC,GAAD,mBAAC,eAClBA,GADiB,IAEpBC,SC1BqBC,ED0BC,GAAD,mBACdF,EAASG,mBADK,CAEjBH,EAASI,iBC3BjB,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADd,IAACL,MDqBK,2CAAH,wD,cEnBlBM,EAAUC,IAAOC,IAAV,ugBAkCPC,EAAgBF,IAAOC,IAAV,u6BAoBJ,gBAAGE,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,OACVD,EACM,WACCA,GAAWC,EACZ,MACA,U,OCdHC,EAhCiB,SAAC,GAAD,IAC5Bd,EAD4B,EAC5BA,SACAC,EAF4B,EAE5BA,QACAc,EAH4B,EAG5BA,SACAC,EAJ4B,EAI5BA,WACAC,EAL4B,EAK5BA,WACAC,EAN4B,EAM5BA,cAN4B,OAQ5B,eAACV,EAAD,CAASW,UAAU,UAAnB,UACI,oBAAGA,UAAU,SAAb,uBACeF,EADf,MAC8BC,KAE9B,mBAAGC,UAAU,WAAWC,wBAAyB,CAAEC,OAAQrB,KAC3D,8BACKC,EAAQF,KAAI,SAAAuB,GAAM,OACf,cAACX,EAAD,CAEIC,SAAmB,OAAVI,QAAU,IAAVA,OAAA,EAAAA,EAAYO,iBAAkBD,EACvCT,aAAuB,OAAVG,QAAU,IAAVA,OAAA,EAAAA,EAAYM,UAAWA,EAHxC,SAKI,wBACIE,WAAUR,EACVS,QAASV,EACTW,MAAOJ,EAHX,SAII,sBAAMF,wBAAyB,CAACC,OAAQC,QARvCA,YC/BV,MAA0B,6CCA1B,MAA0B,gDCK5BK,EAAcC,YAAH,mqBAiBLC,EAOAC,GAaNtB,EAAUC,IAAOC,IAAV,+lECsELqB,EA5FH,WACR,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAA0B,IAA5D,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAsCN,mBAAyB,IAA/D,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA0BR,mBAAS,GAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACA,EAAgCV,oBAAS,GAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KAEMC,EAAW,uCAAG,4BAAApD,EAAA,6DAEhByC,GAAW,GACXU,GAAY,GAHI,SAKUtD,EAfX,GAiBXD,EAAWyD,MAPC,OAKVC,EALU,OAUhBX,EAAaW,GACbL,EAAS,GACTF,EAAe,IACfF,EAAU,GACVJ,GAAW,GAdK,4CAAH,qDA+CjB,OACI,qCACI,cAACP,EAAD,IACA,eAAC,EAAD,WACQ,4CACCgB,GA9DE,KA8DUJ,EAAYS,OACrB,wBAAQ7B,UAAU,QAAQM,QAASoB,EAAnC,mBAGA,KACNF,EAAoD,KAAzC,oBAAGxB,UAAU,QAAb,mBAA4BsB,KACpCR,GAAW,sDACVA,IAAYU,GACV,cAAC,EAAD,CACI1B,WAAYoB,EAAS,EACrBnB,cAxEL,GAyEKlB,SAAUmC,EAAUE,GAAQrC,SAC5BC,QAASkC,EAAUE,GAAQpC,QAC3Be,WACIuB,EAAcA,EAAYF,QAAUY,EAExClC,SAnDJ,SAACmC,GACjB,IAAKP,EAAU,CAEX,IAAMrB,EAAS4B,EAAEC,cAAczB,MAEzBd,EAAUuB,EAAUE,GAAQjC,iBAAmBkB,EAEjDV,GAAS8B,GAAS,SAACU,GAAD,OAAUA,EAAO,KAEvC,IAAMC,EAAe,CACjBrD,SAAUmC,EAAUE,GAAQrC,SAC5BsB,SACAV,UACAW,cAAeY,EAAUE,GAAQjC,gBAErCoC,GAAe,SAACY,GAAD,4BAAcA,GAAd,CAAoBC,WAuCzBV,GACDV,GACDM,EAAYS,SAAWX,EAAS,GACrBiB,IAAXjB,EAII,KAHA,wBAAQlB,UAAU,OAAOM,QAvCxB,WAEjB,IAAM8B,EAAelB,EAAS,EAhDf,KAkDXkB,EACAX,GAAY,GAEZN,EAAUiB,IAgCE,kCCnGxBC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.7b000dd2.chunk.js","sourcesContent":["import {shuffleArray} from './utils'\r\nexport interface Question {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\nexport interface Answers {\r\n    answers: string[]\r\n} \r\n\r\nexport interface QuestionState extends Question, Answers {}\r\n\r\nexport enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard',\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n    const data = await (await fetch(endpoint)).json()\r\n    return data.results.map((question: Question) => ({\r\n        ...question,\r\n        answers: shuffleArray([\r\n            ...question.incorrect_answers,\r\n            question.correct_answer,\r\n        ])\r\n    }))\r\n}\r\n","export const shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5)","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    width: 1100px;\r\n    background: #ebfeff;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    box-shadow: 0px 2px 10px hotpink;\r\n    text-align: center;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    @media (max-width: 1200px) {\r\n        width: 800px;\r\n    }\r\n    \r\n    @media (max-width: 830px) {\r\n        width: 99%;\r\n    }\r\n\r\n    .number {\r\n        font-size: 1.1rem;\r\n        color: grey;\r\n    }\r\n\r\n    .question {\r\n        font-size: 1.3rem;\r\n        color: #555555;\r\n    }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n    transition: all 0.5s ease;\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n\r\n    button {\r\n        display: flex;\r\n        justify-content: center;\r\n        padding: 5px 10px;\r\n        transition: all 0.2s ease;\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 1.5rem;\r\n        width: 80%;\r\n        font-weight: bold;\r\n        margin: 5px 0;\r\n        background: ${({ correct, userClicked }) =>\r\n            correct\r\n                ? \"hotpink\"\r\n                : !correct && userClicked\r\n                ? \"red\"\r\n                : \"pink\"};\r\n        border: 2px solid #ffffff;\r\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n        border-radius: 10px;\r\n        color: #fff;\r\n        text-shadow: 0px 2px 2px rgba(0, 0, 0, 0.25);\r\n    }\r\n\r\n    @media(max-width: 450px) {\r\n        button {\r\n            font-size: 1.2rem;\r\n        }\r\n    }\r\n\r\n    button:hover {\r\n        transform: scale(1.02);\r\n        text-shadow: 0px 2px 2px hotpink;\r\n    }\r\n    \r\n    span {\r\n        flex: 0 0 100%;\r\n    }\r\n`;\r\n","import { FC } from 'react'\r\n// Types\r\nimport { AnswerObject } from '../App'\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\r\n\r\ninterface Props {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestion: number;\r\n}\r\n\r\nconst QuestionCard: FC<Props> = ({\r\n    question,\r\n    answers,\r\n    callback,\r\n    userAnswer,\r\n    questionNr,\r\n    totalQuestion\r\n}) => (\r\n    <Wrapper className=\"wrapper\">\r\n        <p className='number'>\r\n            Question: {questionNr} / {totalQuestion}\r\n        </p>\r\n        <p className='question' dangerouslySetInnerHTML={{ __html: question }}/>\r\n        <div >\r\n            {answers.map(answer => (\r\n                <ButtonWrapper\r\n                    key={answer}\r\n                    correct={userAnswer?.correctAnswer === answer}\r\n                    userClicked={userAnswer?.answer === answer}\r\n                >\r\n                    <button\r\n                        disabled={userAnswer ? true : false}\r\n                        onClick={callback}\r\n                        value={answer}>\r\n                        <span dangerouslySetInnerHTML={{__html: answer}} />\r\n                    </button>\r\n                </ButtonWrapper>\r\n            ))}\r\n        </div>\r\n    </Wrapper>\r\n)\r\n\r\nexport default QuestionCard\r\n","export default __webpack_public_path__ + \"static/media/UbuntuMono-Bold.aab53048.woff\";","export default __webpack_public_path__ + \"static/media/UbuntuMono-Regular.1b36b67c.woff\";","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nimport UbuntuMonoBold from \"./scss/fonts/UbuntuMono-Bold.woff\";\r\nimport UbuntuMonoRegular from \"./scss/fonts/UbuntuMono-Regular.woff\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    height: 100%;\r\n    }\r\n\r\n    body {\r\n    background-size: cover;\r\n    background-color: pink;\r\n    margin: 0;\r\n    padding: 0 5px;\r\n    display: flex;\r\n    justify-content: center;\r\n    font-weight: bold;\r\n    }\r\n\r\n    @font-face {\r\n        font-family: 'UbuntuMono';\r\n        src: url(${UbuntuMonoRegular});\r\n        font-weight: 400;\r\n        font-display: swap;\r\n        font-style: normal;\r\n    \r\n    @font-face {\r\n        font-family: 'UbuntuMono';\r\n        src: url(${UbuntuMonoBold});\r\n        font-weight: 700;\r\n        font-display: swap;\r\n        font-style: normal;\r\n    }\r\n\r\n  * {\r\n    font-family: 'UbuntuMono';\r\n    box-sizing: border-box;\r\n    }\r\n\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    > p {\r\n        color: #fff;\r\n    }\r\n\r\n    .score {\r\n        color: #fff;\r\n        font-size: 35px;\r\n        margin-bottom: 10px;\r\n        margin-block-start: 0;\r\n    }\r\n\r\n    h1 {\r\n        font-family: 'UbuntuMono';\r\n        background-image: linear-gradient(180deg, pink, white);\r\n        font-weight: bold;\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px 2px hotpink);\r\n        font-size: 4rem;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n    @media (max-width: 435px) {\r\n        h1 {\r\n            font-size: 1.5rem;\r\n        }\r\n    }\r\n\r\n\r\n    .start,\r\n    .next {\r\n        transition: 0.4s ease;\r\n        color: white;\r\n        cursor: pointer;\r\n        font-weight: bold;\r\n        font-size: 1.2rem;\r\n        background: pink;\r\n        border: 2px solid white;\r\n        box-shadow: 0px 5px 10px hotpink;\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n\r\n    .start: hover,\r\n    .next: hover {\r\n        transform: scale(1.1)\r\n    }\r\n\r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n\r\n    .start:hover{\r\n        background-image:     linear-gradient(\r\n        to right, \r\n        #E7484F,\r\n        #E7484F 16.65%,\r\n        #F68B1D 16.65%,\r\n        #F68B1D 33.3%,\r\n        #FCED00 33.3%,\r\n        #FCED00 49.95%,\r\n        #009E4F 49.95%,\r\n        #009E4F 66.6%,\r\n        #00AAC3 66.6%,\r\n        #00AAC3 83.25%,\r\n        #732982 83.25%,\r\n        #732982 100%,\r\n        #E7484F 100%\r\n        \r\n        \r\n        \r\n        );\r\n        animation:slidebg 3.4s linear infinite;\r\n    }\r\n    \r\n    \r\n    @keyframes slidebg {\r\n        to {\r\n        background-position:20vw;\r\n        }\r\n    }\r\n\r\n    .follow{\r\n        margin-top: 40px;\r\n    }\r\n\r\n    .follow a{\r\n    color: black;\r\n    padding: 8px 16px;\r\n    text-decoration: none;\r\n    }\r\n\r\n`;\r\n","import { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\";\n//  Components\nimport QuestionCard from \"./components/QuestionCard\";\n//  Enum\nimport { Difficulty } from \"./API\";\n//  Interface\nimport { QuestionState } from \"./API\";\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport interface AnswerObject {\n    question: string;\n    answer: string;\n    correct: boolean;\n    correctAnswer: string;\n}\n\nconst TOTAL_QUESTION = 10;\n\nconst App = () => {\n    const [loading, setLoading] = useState(false);\n    const [questions, setQuestions] = useState<QuestionState[]>([]);\n    const [number, setNumber] = useState(0);\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n    const [score, setScore] = useState(0);\n    const [gameOver, setGameOver] = useState(true);\n\n    const startTrivia = async () => {\n        // Добавить try catch\n        setLoading(true);\n        setGameOver(false);\n\n        const newQuestion = await fetchQuizQuestions(\n            TOTAL_QUESTION,\n            Difficulty.EASY\n        );\n\n        setQuestions(newQuestion);\n        setScore(0);\n        setUserAnswers([]);\n        setNumber(0);\n        setLoading(false);\n    };\n\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (!gameOver) {\n            // User answer\n            const answer = e.currentTarget.value;\n            // Check the user's answer against correct answer\n            const correct = questions[number].correct_answer === answer;\n            // Add score if answer is correct\n            if (correct) setScore((prev) => prev + 1);\n            // Save answer in the array for user answers\n            const answerObject = {\n                question: questions[number].question,\n                answer,\n                correct,\n                correctAnswer: questions[number].correct_answer,\n            };\n            setUserAnswers((prev) => [...prev, answerObject]);\n        }\n    };\n\n    const nextQuestion = () => {\n        //Move on to the next question if not the last question\n        const nextQuestion = number + 1;\n\n        if (nextQuestion === TOTAL_QUESTION) {\n            setGameOver(true);\n        } else {\n            setNumber(nextQuestion);\n        }\n    };\n\n    return (\n        <>\n            <GlobalStyle />\n            <Wrapper>\n                    <h1>React Quiz</h1>\n                    {gameOver || userAnswers.length === TOTAL_QUESTION ? (\n                        <button className='start' onClick={startTrivia}>\n                            Start\n                        </button>\n                    ) : null}\n                {!gameOver ? <p className='score'>Score:{score}</p> : null}\n                    {loading && <p>Loading Questions...</p>}\n                    {!loading && !gameOver && (\n                        <QuestionCard\n                            questionNr={number + 1}\n                            totalQuestion={TOTAL_QUESTION}\n                            question={questions[number].question}\n                            answers={questions[number].answers}\n                            userAnswer={\n                                userAnswers ? userAnswers[number] : undefined\n                            }\n                            callback={checkAnswer}\n                        />\n                    )}\n                    {!gameOver &&\n                    !loading &&\n                    userAnswers.length === number + 1 &&\n                    number !== TOTAL_QUESTION - 1 ? (\n                        <button className='next' onClick={nextQuestion}>\n                            Next Question\n                        </button>\n                    ) : null}\n            </Wrapper>\n        </>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}